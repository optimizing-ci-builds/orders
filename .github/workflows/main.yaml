name: ci

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GROUP: weaveworksdemos
      COMMIT: ${{ github.sha }}
      REPO: orders
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/orders/orders/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'optimizing-ci-builds'
      - uses: actions/checkout@v2

      - run: touch starting_test_SetupJDK18_25
      - run: rm starting_test_SetupJDK18_25
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - run: touch starting_test_CacheMavenpackages_30
      - run: rm starting_test_CacheMavenpackages_30
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - run: touch starting_test_BuildwithMaven_37
      - run: rm starting_test_BuildwithMaven_37
      - name: Build with Maven
        run: mvn -B -DskipTests package --file pom.xml

      - run: touch starting_test_UnitTests_40
      - run: rm starting_test_UnitTests_40
      - name: Unit Tests
        run: mvn -q test

      - run: touch starting_test_IntegrationTests_43
      - run: rm starting_test_IntegrationTests_43
      - name: Integration Tests
        run: mvn integration-test

      # Build docker image for service
      - run: touch starting_test_Builddockerimage_47
      - run: rm starting_test_Builddockerimage_47
      - name: Build docker image
        uses: docker/build-push-action@v1
        with:
          push: false
          dockerfile: docker/orders/Dockerfile.github
          repository: ${{ env.GROUP }}/${{ env.REPO }}
          tag_with_ref: true
          tag_with_sha: true
          tags: ${{ github.sha }}

      # Build docker image for mock service
      - run: touch starting_test_Buildmockdockerimage_58
      - run: rm starting_test_Buildmockdockerimage_58
      - name: Build mock docker image
        uses: docker/build-push-action@v1
        with:
          push: false
          path: test/json-server/
          dockerfile: test/json-server/Dockerfile
          repository: weaveworksdemos/json-server
          tags: latest
          
      # Run simple test against built container
      - run: touch starting_test_Testdockerimage_68
      - run: rm starting_test_Testdockerimage_68
      - name: Test docker image
        env:
          DOCKER_BUILDKIT: 1
        run: ./test/test.sh container.py --tag ${GITHUB_SHA}

      # Upload coverage results to coveralls
      - run: touch starting_test_SubmitCoveralls_74
      - run: rm starting_test_SubmitCoveralls_74
      - name: Submit Coveralls
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        run: mvn -DrepoToken=${COVERALLS_TOKEN} -DserviceJobId=${GITHUB_RUN_ID} -Dbranch=${GITHUB_REF} -DpullRequest=${GITHUB_HEAD_REF} -DserviceName=GITHUB verify jacoco:report coveralls:report

      # Push to dockerhub
      - run: touch starting_test_PushtoDockerHub_80
      - run: rm starting_test_PushtoDockerHub_80
      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
          dockerfile: docker/orders/Dockerfile.github
          repository: ${{ env.GROUP }}/${{ env.REPO }}
          tag_with_ref: true
          tag_with_sha: true
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: rat check
        if: always()
        run: |
           if [ -f /home/runner/work/orders/orders/target/rat.txt ]; then cat /home/runner/work/orders/orders/target/rat.txt; fi
      - name: Check script file exists and execute
        if: always()
        run: |
          [ -f .github/workflows/script.py ] && python .github/workflows/script.py
          [ -f /home/runner/work/orders/orders/optimizing-ci-builds-ci-analysis/job.csv ] || mkdir -p /home/runner/work/orders/orders/optimizing-ci-builds-ci-analysis/; echo "${GITHUB_RUN_ID},${GITHUB_JOB},orders,${GITHUB_WORKFLOW}" > /home/runner/work/orders/orders/optimizing-ci-builds-ci-analysis/job.csv
      - name: Checkout to destination CI-analyzes repo
        uses: actions/checkout@v3
        if: always()
        with:
          path: orders
          ref: '1680156014-f3221fe'
          repository: 'UT-SE-Research/ci-analyzes'
          token: '${{ secrets.API_TOKEN_GITHUB }}'
          persist-credentials: true
      - name: Copy files to push to another directory
        if: always()
        run: |
          mkdir -p orders/orders/.github/workflows/main.yaml/test
          cp -rvT optimizing-ci-builds-ci-analysis orders/orders/.github/workflows/main.yaml/test
      - run: echo https://github.com/UT-SE-Research/ci-analyzes/tree/1680156014-f3221fe/orders/.github/workflows/main.yaml/test
      - name: Pushes analysis to another repository
        if: always()
        working-directory: orders
        run: |
          commit_message=$GITHUB_REPOSITORY@$GITHUB_WORKFLOW_SHA
          git config --global user.name 'UT-SE-Research'
          git config --global user.email '${{ secrets.EMAIL }}'
          git add .
          git commit -m $commit_message
          while ! git push origin 1680156014-f3221fe; do
            git pull --rebase origin 1680156014-f3221fe
            sleep $((RANDOM % 5 + 1))
          done